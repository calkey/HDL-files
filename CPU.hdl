// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(x=instruction[15], out=aInstruction);
    Not(x=aInstruction, out=cInstruction);
    And(x=cInstruction, y=instruction[5], out=xx);

    Mux16(x=instruction, y=AluOut, sel=xx, out=mux1Out);

    Or(x=aInstruction, y=xx, out=loadA);

    ARegister(in=mux1Out, load=loadA, out=aRegOut);

    Mux16(x=aRegOut, y=inM, sel=instruction[12], out=mux2Out);

    And(x=cInstruction, y=instruction[4], out=loadD);
    DRegister(in=AluOut, load=loadD, out=dRegOut);

    ALU(x=dRegOut, y=mux2Out, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=AluOut, zr=ZRout, ng=NGout);


    Or16(x=false, y=aRegOut, out[0..14]=addressM);
    Or16(x=false, y=AluOut, out=outM);
    And(x=cInstruction, y=instruction[3], out=writeM);


    And(x=ZRout, y=instruction[1], out=jmpEQ);
    And(x=NGout, y=instruction[2], out=jmpLT);
    Or(x=ZRout, y=NGout, out=zeroOrNegative);
    Not(x=zeroOrNegative, out=positive);
    And(x=positive, y=instruction[0], out=jmpGT);
    Or(x=jmpEQ, y=jmpLT, out=jmpLE);
    Or(x=jmpLE, y=jmpGT, out=jmpA);
    And(x=cInstruction, y=jmpA, out=PCload);
    Not(x=PCload, out=PCinc);
    PC(x=aRegOut, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);






}
